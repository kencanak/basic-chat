{"version":3,"sources":["../../../server/config/socketio.js"],"names":[],"mappings":";;;AAGA;;;;;;;;;;kBAoBe,UAAS,QAAT,EAAmB;;;;;;;;;;;AAWhC,WAAS,GAAT,CAAa,QAAQ,cAAR,EAAwB,SAAxB,CAAkC;AAC7C,YAAQ,sBAAO,OAAP,CAAe,OADsB;AAE7C,eAAW;AAFkC,GAAlC,CAAb;;AAKA,WAAS,EAAT,CAAY,YAAZ,EAA0B,UAAS,MAAT,EAAiB;AACzC,WAAO,OAAP,GAAiB,OAAO,OAAP,CAAe,UAAf,CAA0B,aAA1B,GACf,GADe,GACT,OAAO,OAAP,CAAe,UAAf,CAA0B,UADlC;;AAGA,WAAO,WAAP,GAAqB,IAAI,IAAJ,EAArB;;AAEA,WAAO,GAAP,GAAa,YAAkB;AAAA;;AAAA,wCAAN,IAAM;AAAN,YAAM;AAAA;;AAC7B,2BAAQ,GAAR,gCAAwB,OAAO,GAAP,CAAW,IAAnC,UAA4C,OAAO,OAAnD,eAAkE,IAAlE;AACD,KAFD;;;AAKA,WAAO,EAAP,CAAU,YAAV,EAAwB,YAAM;AAC5B,mBAAa,MAAb;AACA,aAAO,GAAP,CAAW,cAAX;AACD,KAHD;;;AAMA,cAAU,MAAV;AACA,WAAO,GAAP,CAAW,WAAX;;AAEA,WAAO,EAAP,CAAU,iBAAV,EAA6B,YAAU;AACrC,eAAS,IAAT,CAAc,iBAAd;AACD,KAFD;;AAIA,WAAO,EAAP,CAAU,YAAV,EAAwB,UAAS,KAAT,EAAe;AACrC,UAAG,CAAC,OAAO,KAAP,CAAa,MAAM,MAAnB,CAAJ,EAA+B;AAC7B,eAAO,IAAP,CAAY,MAAM,MAAlB;AACD;;AAED,eAAS,EAAT,CAAY,MAAM,MAAlB,EAA0B,IAA1B,CAA+B,cAA/B,EAA+C,KAA/C;AACA,eAAS,EAAT,CAAY,MAAM,MAAlB,EAA0B,IAA1B,CAA+B,aAA/B,EAA8C,KAA9C;AACD,KAPD;;AASA,WAAO,EAAP,CAAU,MAAV,EAAkB,YAAU;AAC1B,aAAO,GAAP,CAAW,2BAAX;AACD,KAFD;;AAIA,WAAO,EAAP,CAAU,YAAV,EAAwB,UAAS,KAAT,EAAe;AACrC,aAAO,GAAP,CAAW,cAAX;AACA,UAAG,CAAC,OAAO,KAAP,CAAa,MAAM,MAAnB,CAAJ,EACE,OAAO,IAAP,CAAY,MAAM,MAAlB;;AAEF,aAAO,GAAP,CAAW,OAAO,KAAlB;AACD,KAND;AAOD,GA5CD;AA6CD,C;;AA/ED;;;;;;;AAGA,SAAS,YAAT,CAAsB,MAAtB,EAA8B,CAC7B;;;AAGD,SAAS,SAAT,CAAmB,MAAnB,EAA2B;;AAEzB,SAAO,EAAP,CAAU,MAAV,EAAkB,gBAAQ;AACxB,WAAO,GAAP,CAAW,yBAAe,IAAf,EAAqB,IAArB,EAA2B,CAA3B,CAAX;AACD,GAFD;;;AAKA,UAAQ,yBAAR,EAAmC,QAAnC,CAA4C,MAA5C;AAED","file":"socketio.js","sourcesContent":["/**\n * Socket.io configuration\n */\n'use strict';\n\nimport config from './environment';\n\n// When the user disconnects.. perform this\nfunction onDisconnect(socket) {\n}\n\n// When the user connects.. perform this\nfunction onConnect(socket) {\n  // When the client emits 'info', this listens and executes\n  socket.on('info', data => {\n    socket.log(JSON.stringify(data, null, 2));\n  });\n\n  // Insert sockets below\n  require('../api/user/user.socket').register(socket);\n\n}\n\nexport default function(socketio) {\n  // socket.io (v1.x.x) is powered by debug.\n  // In order to see all the debug output, set DEBUG (in server/config/local.env.js) to including the desired scope.\n  //\n  // ex: DEBUG: \"http*,socket.io:socket\"\n\n  // We can authenticate socket.io users and access their token through socket.decoded_token\n  //\n  // 1. You will need to send the token in `client/components/socket/socket.service.js`\n  //\n  // 2. Require authentication here:\n  socketio.use(require('socketio-jwt').authorize({\n    secret: config.secrets.session,\n    handshake: true\n  }));\n\n  socketio.on('connection', function(socket) {\n    socket.address = socket.request.connection.remoteAddress +\n      ':' + socket.request.connection.remotePort;\n\n    socket.connectedAt = new Date();\n\n    socket.log = function(...data) {\n      console.log(`SocketIO ${socket.nsp.name} [${socket.address}]`, ...data);\n    };\n\n    // Call onDisconnect.\n    socket.on('disconnect', () => {\n      onDisconnect(socket);\n      socket.log('DISCONNECTED');\n    });\n\n    // Call onConnect.\n    onConnect(socket);\n    socket.log('CONNECTED');\n\n    socket.on('Update Contacts', function(){\n      socketio.emit('Update Contacts');\n    });\n\n    socket.on('Begin Chat', function(param){\n      if(!socket.rooms[param.roomId]){\n        socket.join(param.roomId);\n      }\n\n      socketio.to(param.roomId).emit('Send Message', param);\n      socketio.to(param.roomId).emit('New Message', param);\n    });\n\n    socket.on('test', function(){\n      socket.log(\"fucking test emit message\");\n    });\n\n    socket.on('Join Rooms', function(param){\n      socket.log(\"joining room\");\n      if(!socket.rooms[param.roomId])\n        socket.join(param.roomId);\n\n      socket.log(socket.rooms);\n    });\n  });\n}\n"]}