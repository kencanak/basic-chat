{"version":3,"sources":["../../../../server/api/message/message.controller.js"],"names":[],"mappings":"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","file":"message.controller.js","sourcesContent":["'use strict';\n\nimport Message from './message.model';\nimport passport from 'passport';\nimport config from '../../config/environment';\nimport jwt from 'jsonwebtoken';\n\nfunction validationError(res, statusCode) {\n  statusCode = statusCode || 422;\n  return function(err) {\n    res.status(statusCode).json(err);\n  }\n}\n\nfunction handleError(res, statusCode) {\n  statusCode = statusCode || 500;\n  return function(err) {\n    res.status(statusCode).send(err);\n  };\n}\n\n/**\n * get room Id based on participants - for private chat only\n */\n export function getPrivateRoomIdByParticipant(req,res){\n   var currentUser = req.user.userName;\n   var recipient = req.user.recipient;\n   var keyword = new RegExp(currentUser + '.*' + recipient, \"gi\");\n   return Message.findOne({roomId: keyword, conversationType: 'private'},  '-conversations').exec()\n    .then(messages => {\n      res.status(200).json({data:messages});\n    })\n    .catch(handleError(res));\n }\n\n/**\n * get current user conversations\n */\n export function getCurrentUserConversations(req, res){\n   var currentUser = req.user.userName;\n   return Message.find({participants: {$in:[currentUser]}}).sort({updatedAt:1, conversationType: -1}).exec()\n    .then(messages => {\n      res.status(200).json({data:messages});\n    })\n    .catch(handleError(res));\n }\n\n/**\n * record conversations\n */\n\n export function recordConversations(req, res, next){\n   var roomId = req.params.roomId;\n   var participants = roomId.split('|');\n   var messageAuthor = req.params.messageAuthor;\n   var messageContent = req.params.messageContent;\n   var conversationType = participants.length === 2 ? 'private' : 'group';\n\n   return Message.findOne({roomId: roomId}).exec()\n     .then(message => {\n       var conversations = [];\n        if (message && message.conversations){\n          conversations = message.conversations;\n        }\n        conversations.push(\n          {\n            'author': messageAuthor,\n            'content': messageContent,\n            'timestamp': new Date()\n          }\n        );\n\n        return Message.findOneAndUpdate({'roomId': roomId}\n             ,{\n               'roomId': roomId,\n               'participants': participants,\n               'conversations': conversations,\n               'conversationType' : conversationType\n             }\n             ,{upsert: true, 'new': true}).then(() => {\n                 res.status(204).end();\n          })\n          .catch(validationError(res));\n     });\n }\n\n/**\n * Authentication callback\n */\nexport function authCallback(req, res, next) {\n  res.redirect('/');\n}\n"]}