{"version":3,"sources":["../../../../server/api/message/message.model.js"],"names":[],"mappings":"AAAA;;;;;;AAEA;;;;AACA;;;;;;AACA,mBAAS,OAAT,GAAmB,QAAQ,UAAR,CAAnB;;;AAGA,IAAI,gBAAgB,qBAAW;AAC7B,UAAQ;AACN,UAAM,MADA;AAEN,cAAU;AAFJ,GADqB;AAK7B,gBAAc,CACV;AACE,UAAM;AADR,GADU,CALe;AAU7B,oBAAkB;AACd,UAAM,MADQ;AAEd,eAAW,IAFG;AAGd,cAAU;AAHI,GAVW;AAe7B,iBAAe,CACb;AACE,YAAQ;AACN,YAAM,MADA;AAEN,iBAAW;AAFL,KADV;AAKE,aAAS;AACP,YAAM;AADC,KALX;AAQE,eAAW;AACT,YAAM;AADG;AARb,GADa;AAfc,CAAX,EA8BpB;AACI,cAAY;AADhB,CA9BoB,CAApB;;kBAmCe,mBAAS,KAAT,CAAe,SAAf,EAA0B,aAA1B,C","file":"message.model.js","sourcesContent":["'use strict';\n\nimport crypto from 'crypto';\nimport mongoose from 'mongoose';\nmongoose.Promise = require('bluebird');\nimport {Schema} from 'mongoose';\n\nvar MessageSchema = new Schema({\n  roomId: {\n    type: String,\n    required: true\n  },\n  participants: [\n      {\n        type: String\n      }\n  ],\n  conversationType: {\n      type: String,\n      lowercase: true,\n      required: true\n  },\n  conversations: [\n    {\n      author: {\n        type: String,\n        lowercase: true\n      },\n      content: {\n        type: String\n      },\n      timestamp: {\n        type: Date\n      }\n    }\n  ]\n},\n{\n    timestamps: true\n});\n\n\nexport default mongoose.model('Message', MessageSchema);\n"]}